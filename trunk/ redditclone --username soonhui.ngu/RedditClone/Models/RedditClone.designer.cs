#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3031
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RedditClone.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="RedditClone")]
	public partial class RedditCloneDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUserInfo(UserInfo instance);
    partial void UpdateUserInfo(UserInfo instance);
    partial void DeleteUserInfo(UserInfo instance);
    partial void InsertArticle(Article instance);
    partial void UpdateArticle(Article instance);
    partial void DeleteArticle(Article instance);
    partial void InsertVoteHistory(VoteHistory instance);
    partial void UpdateVoteHistory(VoteHistory instance);
    partial void DeleteVoteHistory(VoteHistory instance);
    #endregion
		
		public RedditCloneDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["RedditCloneConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public RedditCloneDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RedditCloneDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RedditCloneDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RedditCloneDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UserInfo> UserInfos
		{
			get
			{
				return this.GetTable<UserInfo>();
			}
		}
		
		public System.Data.Linq.Table<Article> Articles
		{
			get
			{
				return this.GetTable<Article>();
			}
		}
		
		public System.Data.Linq.Table<VoteHistory> VoteHistories
		{
			get
			{
				return this.GetTable<VoteHistory>();
			}
		}
	}
	
	[Table(Name="dbo.UserInfo")]
	public partial class UserInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Diggers;
		
		private string _password;
		
		private EntitySet<Article> _Articles;
		
		private EntitySet<VoteHistory> _VoteHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDiggersChanging(string value);
    partial void OnDiggersChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    #endregion
		
		public UserInfo()
		{
			this._Articles = new EntitySet<Article>(new Action<Article>(this.attach_Articles), new Action<Article>(this.detach_Articles));
			this._VoteHistories = new EntitySet<VoteHistory>(new Action<VoteHistory>(this.attach_VoteHistories), new Action<VoteHistory>(this.detach_VoteHistories));
			OnCreated();
		}
		
		[Column(Storage="_Diggers", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Diggers
		{
			get
			{
				return this._Diggers;
			}
			set
			{
				if ((this._Diggers != value))
				{
					this.OnDiggersChanging(value);
					this.SendPropertyChanging();
					this._Diggers = value;
					this.SendPropertyChanged("Diggers");
					this.OnDiggersChanged();
				}
			}
		}
		
		[Column(Storage="_password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[Association(Name="UserInfo_Article", Storage="_Articles", OtherKey="Diggers")]
		public EntitySet<Article> Articles
		{
			get
			{
				return this._Articles;
			}
			set
			{
				this._Articles.Assign(value);
			}
		}
		
		[Association(Name="UserInfo_VoteHistory", Storage="_VoteHistories", OtherKey="diggers")]
		public EntitySet<VoteHistory> VoteHistories
		{
			get
			{
				return this._VoteHistories;
			}
			set
			{
				this._VoteHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Articles(Article entity)
		{
			this.SendPropertyChanging();
			entity.UserInfo = this;
		}
		
		private void detach_Articles(Article entity)
		{
			this.SendPropertyChanging();
			entity.UserInfo = null;
		}
		
		private void attach_VoteHistories(VoteHistory entity)
		{
			this.SendPropertyChanging();
			entity.UserInfo = this;
		}
		
		private void detach_VoteHistories(VoteHistory entity)
		{
			this.SendPropertyChanging();
			entity.UserInfo = null;
		}
	}
	
	[Table(Name="dbo.Article")]
	public partial class Article : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Title;
		
		private string _URL;
		
		private string _Diggers;
		
		private System.DateTime _submittedDate;
		
		private System.Nullable<System.DateTime> _publishedDate;
		
		private EntitySet<VoteHistory> _VoteHistories;
		
		private EntityRef<UserInfo> _UserInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    partial void OnDiggersChanging(string value);
    partial void OnDiggersChanged();
    partial void OnsubmittedDateChanging(System.DateTime value);
    partial void OnsubmittedDateChanged();
    partial void OnpublishedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnpublishedDateChanged();
    #endregion
		
		public Article()
		{
			this._VoteHistories = new EntitySet<VoteHistory>(new Action<VoteHistory>(this.attach_VoteHistories), new Action<VoteHistory>(this.detach_VoteHistories));
			this._UserInfo = default(EntityRef<UserInfo>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_URL", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[Column(Storage="_Diggers", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Diggers
		{
			get
			{
				return this._Diggers;
			}
			set
			{
				if ((this._Diggers != value))
				{
					if (this._UserInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDiggersChanging(value);
					this.SendPropertyChanging();
					this._Diggers = value;
					this.SendPropertyChanged("Diggers");
					this.OnDiggersChanged();
				}
			}
		}
		
		[Column(Storage="_submittedDate", DbType="DateTime NOT NULL")]
		public System.DateTime submittedDate
		{
			get
			{
				return this._submittedDate;
			}
			set
			{
				if ((this._submittedDate != value))
				{
					this.OnsubmittedDateChanging(value);
					this.SendPropertyChanging();
					this._submittedDate = value;
					this.SendPropertyChanged("submittedDate");
					this.OnsubmittedDateChanged();
				}
			}
		}
		
		[Column(Storage="_publishedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> publishedDate
		{
			get
			{
				return this._publishedDate;
			}
			set
			{
				if ((this._publishedDate != value))
				{
					this.OnpublishedDateChanging(value);
					this.SendPropertyChanging();
					this._publishedDate = value;
					this.SendPropertyChanged("publishedDate");
					this.OnpublishedDateChanged();
				}
			}
		}
		
		[Association(Name="Article_VoteHistory", Storage="_VoteHistories", OtherKey="articleID")]
		public EntitySet<VoteHistory> VoteHistories
		{
			get
			{
				return this._VoteHistories;
			}
			set
			{
				this._VoteHistories.Assign(value);
			}
		}
		
		[Association(Name="UserInfo_Article", Storage="_UserInfo", ThisKey="Diggers", IsForeignKey=true)]
		public UserInfo UserInfo
		{
			get
			{
				return this._UserInfo.Entity;
			}
			set
			{
				UserInfo previousValue = this._UserInfo.Entity;
				if (((previousValue != value) 
							|| (this._UserInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserInfo.Entity = null;
						previousValue.Articles.Remove(this);
					}
					this._UserInfo.Entity = value;
					if ((value != null))
					{
						value.Articles.Add(this);
						this._Diggers = value.Diggers;
					}
					else
					{
						this._Diggers = default(string);
					}
					this.SendPropertyChanged("UserInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VoteHistories(VoteHistory entity)
		{
			this.SendPropertyChanging();
			entity.Article = this;
		}
		
		private void detach_VoteHistories(VoteHistory entity)
		{
			this.SendPropertyChanging();
			entity.Article = null;
		}
	}
	
	[Table(Name="dbo.VoteHistory")]
	public partial class VoteHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _voteID;
		
		private string _diggers;
		
		private int _articleID;
		
		private int _voteChoice;
		
		private EntityRef<Article> _Article;
		
		private EntityRef<UserInfo> _UserInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvoteIDChanging(int value);
    partial void OnvoteIDChanged();
    partial void OndiggersChanging(string value);
    partial void OndiggersChanged();
    partial void OnarticleIDChanging(int value);
    partial void OnarticleIDChanged();
    partial void OnvoteChoiceChanging(int value);
    partial void OnvoteChoiceChanged();
    #endregion
		
		public VoteHistory()
		{
			this._Article = default(EntityRef<Article>);
			this._UserInfo = default(EntityRef<UserInfo>);
			OnCreated();
		}
		
		[Column(Storage="_voteID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int voteID
		{
			get
			{
				return this._voteID;
			}
			set
			{
				if ((this._voteID != value))
				{
					this.OnvoteIDChanging(value);
					this.SendPropertyChanging();
					this._voteID = value;
					this.SendPropertyChanged("voteID");
					this.OnvoteIDChanged();
				}
			}
		}
		
		[Column(Storage="_diggers", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string diggers
		{
			get
			{
				return this._diggers;
			}
			set
			{
				if ((this._diggers != value))
				{
					if (this._UserInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndiggersChanging(value);
					this.SendPropertyChanging();
					this._diggers = value;
					this.SendPropertyChanged("diggers");
					this.OndiggersChanged();
				}
			}
		}
		
		[Column(Storage="_articleID", DbType="Int NOT NULL")]
		public int articleID
		{
			get
			{
				return this._articleID;
			}
			set
			{
				if ((this._articleID != value))
				{
					if (this._Article.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnarticleIDChanging(value);
					this.SendPropertyChanging();
					this._articleID = value;
					this.SendPropertyChanged("articleID");
					this.OnarticleIDChanged();
				}
			}
		}
		
		[Column(Storage="_voteChoice", DbType="Int NOT NULL")]
		public int voteChoice
		{
			get
			{
				return this._voteChoice;
			}
			set
			{
				if ((this._voteChoice != value))
				{
					this.OnvoteChoiceChanging(value);
					this.SendPropertyChanging();
					this._voteChoice = value;
					this.SendPropertyChanged("voteChoice");
					this.OnvoteChoiceChanged();
				}
			}
		}
		
		[Association(Name="Article_VoteHistory", Storage="_Article", ThisKey="articleID", IsForeignKey=true)]
		public Article Article
		{
			get
			{
				return this._Article.Entity;
			}
			set
			{
				Article previousValue = this._Article.Entity;
				if (((previousValue != value) 
							|| (this._Article.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Article.Entity = null;
						previousValue.VoteHistories.Remove(this);
					}
					this._Article.Entity = value;
					if ((value != null))
					{
						value.VoteHistories.Add(this);
						this._articleID = value.id;
					}
					else
					{
						this._articleID = default(int);
					}
					this.SendPropertyChanged("Article");
				}
			}
		}
		
		[Association(Name="UserInfo_VoteHistory", Storage="_UserInfo", ThisKey="diggers", IsForeignKey=true)]
		public UserInfo UserInfo
		{
			get
			{
				return this._UserInfo.Entity;
			}
			set
			{
				UserInfo previousValue = this._UserInfo.Entity;
				if (((previousValue != value) 
							|| (this._UserInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserInfo.Entity = null;
						previousValue.VoteHistories.Remove(this);
					}
					this._UserInfo.Entity = value;
					if ((value != null))
					{
						value.VoteHistories.Add(this);
						this._diggers = value.Diggers;
					}
					else
					{
						this._diggers = default(string);
					}
					this.SendPropertyChanged("UserInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
